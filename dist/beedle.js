!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n():"function"==typeof define&&define.amd?define(n):n()}(0,function(){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class t{constructor(t){this.actions={},this.mutations={},this.state={},this.status="resting",this.callbacks=[];const n=this;t&&t.actions&&(n.actions=t.actions),t.hasOwnProperty("mutations")&&(n.mutations=t.mutations),n.state=new Proxy(t.initialState||{},{set(t,s,o){return t[s]=o,n.processCallbacks(n.state),n.status="resting",!0}})}dispatch(t,n){const s=this;return"function"!=typeof s.actions[t]?(console.error(`Action "${t}" doesn't exist.`),!1):(s.status="action",s.actions[t](s,n),!0)}commit(t,n){const s=this;if("function"!=typeof s.mutations[t])return console.error(`Mutation "${t}" doesn't exist`),!1;s.status="mutation";let o=s.mutations[t](s.state,n);return s.state=Object.assign(s.state,o),!0}processCallbacks(t){const n=this;return!!n.callbacks.length&&(n.callbacks.forEach(n=>n(t)),!0)}subscribe(t){const n=this;return"function"!=typeof t?(console.error("You can only subscribe to Store changes with a valid function"),!1):(n.callbacks.push(t),!0)}}exports.default=t});
